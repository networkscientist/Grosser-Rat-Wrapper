[project]
name = "grosserratwrapper"
description = "Python Wrapper to interact with the public API if the Basel-Stadt parliament, the Grosser Rat"
authors = [{ name = "Peter Zweifel", email = "71866336+networkscientist@users.noreply.github.com" }]
requires-python = ">= 3.9"
readme = "README.md"
license = { text = " CC BY-NC-SA 4.0" }
keywords = [
    "Wrapper",
    "API",
    "Basel",
]
dynamic = [
    "classifiers",
]
version="0.0.1"

dependencies = [
    "requests>=2.32.3",
    "pandas>=2.2.2",
    "lxml>=5.2.2",
    "bs4>=0.0.2",
    "aiohttp>=3.10.1",
    "sqlalchemy>=2.0.37",
    "html5lib>=1.1",
    "pypdf>=5.4.0",
]

[dependency-groups]
dev = [
    "python-semantic-release>=9.21.0",
    "ruff>=0.11.7",
]
docs = [
    "jupyterlab>=4.4.2",
    "myst-parser>=3.0.1",
    "sphinx>=7.4.7",
    "sphinx-rtd-theme>=3.0.2",
]
test = [
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "pytest-xdist>=3.6.1",
    "tox>=4.26.0",
]

performance = [
    "pandas[performance]>=2.2.3",
]
all = [
    {include-group="dev"},
    {include-group="docs"},
    {include-group="test"},
    {include-group="performance"}
]
type = [
    "mypy>=1.15.0",
    "pandas-stubs>=2.2.2.240807",
    "types-beautifulsoup4>=4.12.0.20250516",
    "types-requests>=2.32.0.20250515",
]

[project.urls]
repository = "https://github.com/networkscientist/Grosser-Rat-Wrapper"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
only_include = ["src"]

#[tool.hatch.version]
#path = "src/grosserratwrapper/__about__.py"

[tool.semantic-release]
version_variable = "pyproject.toml:version"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
# Same as Black.
line-length = 120
indent-width = 4

target-version = "py312"  # Adjust to your Python version

[tool.ruff.lint]

# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["B", "E4", "E7", "E9", "F", "I", "SIM", "PL"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]

# Like Black, use double quotes for strings.
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.pydocstyle]
convention = "numpy"  # Accepts: "google", "numpy", or "pep257".

[tool.pytest.ini_options]
markers = [
	"unit: unit tests",
	"integration: integration tests",
	"regression: regression tests",
	"performance: performance tests",
	"skip: slow tests or depending on local data"
	]

[tool.tox]
requires = ["tox>=4.19"]
isolated_build = true
# format code and carry out tests in the following python versions
env_list=[
    'format',
    '3.9',
    '3.10',
    '3.11',
    '3.12',
    '3.13',
]

# common dependencies
[tool.tox.env_run_base]
dependency_groups = ['test']
description = "Run test under {base_python}"
commands = [["pytest"]]

# run with uvx --with tox-uv tox -e lint
# format, lint and analyse types
[tool.tox.env.lint]
description = "Lint with Ruff under {base_python}"
dependency_groups = ['type', 'test']
allowlist_externals = ['ruff']
ignore_errors = true
commands = [["ruff", "format", "src", "tests"], ["ruff", "check", "src", "tests"], ["mypy"]]

# format
[tool.tox.env.format]
description = "Format with Ruff under {base_python}"
skip_install = true
allowlist_externals = ['ruff']
commands = [["ruff", "format", "src", "tests"]]

# lint and suggest fixes
[tool.tox.env.fix]
description = "run ruff check on code base"
skip_install = true
allowlist_externals = ['ruff']
commands = [["ruff", "check", "src", "tests"]]

# static type analysis with mypy
[tool.tox.env.type]
description = "run mypy type check on code base"
dependency_groups = ['type']
commands = [["mypy"]]

[tool.mypy]
files = [
    "src",
    "tests"
]
pretty=true
show_error_context = true
ignore_missing_imports = true

[tool.coverage.run]
branch=true
data_file="tests/cover/.coverage"

[tool.coverage.paths]
source = [
    "src/grosserratwrapper",
    "*/site-packages/grosserratwrapper/"
]

[tool.coverage.report]

# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]
show_missing=true
skip_empty=true
skip_covered=true
#fail_under=80
#ignore_errors = true

[tool.coverage.html]
directory = "tests/coverage_html_report"

[tool.semantic_release]
assets = []
build_command_env = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
no_git_verify = false
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
exclude_commit_patterns = []
mode = "init"
insertion_flag = "<!-- version list -->"
template_dir = "templates"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"
mask_initial_release = false

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
other_allowed_tags = ["build", "chore", "ci", "docs", "style", "refactor", "test"]
allowed_tags = ["feat", "fix", "perf", "build", "chore", "ci", "docs", "style", "refactor", "test"]
default_bump_level = 0
parse_squash_commits = false
ignore_merge_commits = false

[tool.semantic_release.remote]
name = "origin"
type = "github"
token  = { env = "GH_TOKEN" }
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

